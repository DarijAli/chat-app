{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nexport const useComponentVisible = initialIsVisible => {\n  _s();\n\n  const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible);\n  const ref = useRef(null);\n\n  const handleClickOutside = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setIsComponentVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    // ref.current.addEventListener(\"click\", handleClickOutside, false)\n    document.addEventListener(\"click\", handleClickOutside, false);\n    return () => {\n      // removeRef.removeEventListener(\"click\", handleClickOutside, true)\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  }, []);\n  return {\n    ref,\n    isComponentVisible,\n    setIsComponentVisible\n  };\n};\n\n_s(useComponentVisible, \"AWy8khZlo/E0vRuiUJhN+9iJdmI=\");","map":{"version":3,"sources":["/Users/mac/Desktop/React/chat-app/client/src/hooks/CustomHooks.js"],"names":["useEffect","useState","useRef","useComponentVisible","initialIsVisible","isComponentVisible","setIsComponentVisible","ref","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,gBAAD,IAAsB;AAAA;;AACvD,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,CAACG,gBAAD,CAA5D;AACA,QAAMG,GAAG,GAAGL,MAAM,CAAC,IAAD,CAAlB;;AACA,QAAMM,kBAAkB,GAAIC,KAAD,IAAW;AACpC,QAAIF,GAAG,CAACG,OAAJ,IAAe,CAACH,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACtDN,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;AACF,GAJD;;AAMAN,EAAAA,SAAS,CAAC,MAAM;AACd;AAEAa,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,kBAAnC,EAAuD,KAAvD;AACA,WAAO,MAAM;AACX;AACAK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCP,kBAAtC,EAA0D,IAA1D;AACD,KAHD;AAID,GARQ,EAQN,EARM,CAAT;AAUA,SAAO;AAAED,IAAAA,GAAF;AAAOF,IAAAA,kBAAP;AAA2BC,IAAAA;AAA3B,GAAP;AACD,CApBM;;GAAMH,mB","sourcesContent":["import { useEffect, useState, useRef } from \"react\"\n\nexport const useComponentVisible = (initialIsVisible) => {\n  const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible)\n  const ref = useRef(null)\n  const handleClickOutside = (event) => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setIsComponentVisible(false)\n    }\n  }\n\n  useEffect(() => {\n    // ref.current.addEventListener(\"click\", handleClickOutside, false)\n\n    document.addEventListener(\"click\", handleClickOutside, false)\n    return () => {\n      // removeRef.removeEventListener(\"click\", handleClickOutside, true)\n      document.removeEventListener(\"click\", handleClickOutside, true)\n    }\n  }, [])\n\n  return { ref, isComponentVisible, setIsComponentVisible }\n}\n"]},"metadata":{},"sourceType":"module"}